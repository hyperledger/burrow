//Code generated by solts. DO NOT EDIT.
import { Address, CancelStreamSignal, ContractCodec, Event, Keccak } from '../../index';
interface Provider {
  deploy(
    data: string | Uint8Array,
    contractMeta?: {
      abi: string;
      codeHash: Uint8Array;
    }[],
  ): Promise<Address>;
  call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
  callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
  listen(
    signatures: string[],
    address: string,
    callback: (err?: Error, event?: Event) => CancelStreamSignal | void,
    start?: 'first' | 'latest' | 'stream' | number,
    end?: 'first' | 'latest' | 'stream' | number,
  ): unknown;
  contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(
  client: Provider,
  addr: string,
  data: Uint8Array,
  isSim: boolean,
  callback: (returnData: Uint8Array | undefined) => Output,
): Promise<Output> {
  const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
  return callback(returnData);
}
export namespace Addition {
  export const contractName = 'Addition';
  export const abi =
    '[{"constant":true,"inputs":[{"internalType":"int256","name":"a","type":"int256"},{"internalType":"int256","name":"b","type":"int256"}],"name":"add","outputs":[{"internalType":"int256","name":"sum","type":"int256"}],"payable":false,"stateMutability":"pure","type":"function"}]';
  export const bytecode =
    '608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a5f3c23b14602d575b600080fd5b606060048036036040811015604157600080fd5b8101908080359060200190929190803590602001909291905050506076565b6040518082815260200191505060405180910390f35b600081830190509291505056fea265627a7a72315820bf9f1b3176bb0e5383e0dbeabc3258cbe895f39124127f38452c4ce85df9672964736f6c63430005110032';
  export const deployedBytecode =
    '6080604052348015600f57600080fd5b506004361060285760003560e01c8063a5f3c23b14602d575b600080fd5b606060048036036040811015604157600080fd5b8101908080359060200190929190803590602001909291905050506076565b6040518082815260200191505060405180910390f35b600081830190509291505056fea265627a7a72315820bf9f1b3176bb0e5383e0dbeabc3258cbe895f39124127f38452c4ce85df9672964736f6c63430005110032';
  export function deploy(client: Provider, withContractMeta = false): Promise<string> {
    const codec = client.contractCodec(abi);
    const data = Buffer.concat([Buffer.from(bytecode, 'hex'), codec.encodeDeploy()]);
    return client.deploy(
      data,
      withContractMeta
        ? [{ abi: Addition.abi, codeHash: new Keccak(256).update(Addition.deployedBytecode, 'hex').digest('binary') }]
        : undefined,
    );
  }
  export async function deployContract(client: Provider, withContractMeta = false): Promise<Contract> {
    const address = await deploy(client, withContractMeta);
    return contract(client, address);
  }
  export type Contract = ReturnType<typeof contract>;
  export const contract = (client: Provider, address: string) =>
    ({
      name: 'Addition',
      address,
      functions: {
        add(
          a: number,
          b: number,
          call = defaultCall,
        ): Promise<{
          sum: number;
        }> {
          const data = encode(client).add(a, b);
          return call<{
            sum: number;
          }>(client, address, data, true, (data: Uint8Array | undefined) => {
            return decode(client, data).add();
          });
        },
      } as const,
    } as const);
  export const encode = (client: Provider) => {
    const codec = client.contractCodec(abi);
    return {
      add: (a: number, b: number) => {
        return codec.encodeFunctionData('A5F3C23B', a, b);
      },
    };
  };
  export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => {
    const codec = client.contractCodec(abi);
    return {
      add: (): {
        sum: number;
      } => {
        const [sum] = codec.decodeFunctionResult('A5F3C23B', data);
        return { sum: sum };
      },
    };
  };
}
