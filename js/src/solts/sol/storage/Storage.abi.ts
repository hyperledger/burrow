//Code generated by solts. DO NOT EDIT.
import { Address, CancelStreamSignal, ContractCodec, Event, Keccak } from '../../../index';
interface Provider {
  deploy(
    data: string | Uint8Array,
    contractMeta?: {
      abi: string;
      codeHash: Uint8Array;
    }[],
  ): Promise<Address>;
  call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
  callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
  listen(
    signatures: string[],
    address: string,
    callback: (err?: Error, event?: Event) => CancelStreamSignal | void,
    start?: 'first' | 'latest' | 'stream' | number,
    end?: 'first' | 'latest' | 'stream' | number,
  ): unknown;
  contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(
  client: Provider,
  addr: string,
  data: Uint8Array,
  isSim: boolean,
  callback: (returnData: Uint8Array | undefined) => Output,
): Promise<Output> {
  const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
  return callback(returnData);
}
export namespace Storage {
  export const contractName = 'Storage';
  export const abi =
    '[{"inputs":[{"internalType":"int256","name":"x","type":"int256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[],"name":"get","outputs":[{"internalType":"int256","name":"ret","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"int256","name":"x","type":"int256"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]';
  export const bytecode =
    '608060405234801561001057600080fd5b506040516101203803806101208339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000819055505060c68061005a6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636d4ce63c146037578063e5c19b2d146053575b600080fd5b603d607e565b6040518082815260200191505060405180910390f35b607c60048036036020811015606757600080fd5b81019080803590602001909291905050506087565b005b60008054905090565b806000819055505056fea265627a7a72315820df6fea8cbd336a45734df49c645eb1a45497cd5babf1e4c20c340998d6d9cb6264736f6c63430005110032';
  export const deployedBytecode =
    '6080604052348015600f57600080fd5b506004361060325760003560e01c80636d4ce63c146037578063e5c19b2d146053575b600080fd5b603d607e565b6040518082815260200191505060405180910390f35b607c60048036036020811015606757600080fd5b81019080803590602001909291905050506087565b005b60008054905090565b806000819055505056fea265627a7a72315820df6fea8cbd336a45734df49c645eb1a45497cd5babf1e4c20c340998d6d9cb6264736f6c63430005110032';
  export function deploy(client: Provider, x: number, withContractMeta = false): Promise<string> {
    const codec = client.contractCodec(abi);
    const data = Buffer.concat([Buffer.from(bytecode, 'hex'), codec.encodeDeploy(x)]);
    return client.deploy(
      data,
      withContractMeta
        ? [{ abi: Storage.abi, codeHash: new Keccak(256).update(Storage.deployedBytecode, 'hex').digest('binary') }]
        : undefined,
    );
  }
  export async function deployContract(client: Provider, x: number, withContractMeta = false): Promise<Contract> {
    const address = await deploy(client, x, withContractMeta);
    return contract(client, address);
  }
  export type Contract = ReturnType<typeof contract>;
  export const contract = (client: Provider, address: string) =>
    ({
      name: 'Storage',
      address,
      functions: {
        get(
          call = defaultCall,
        ): Promise<{
          ret: number;
        }> {
          const data = encode(client).get();
          return call<{
            ret: number;
          }>(client, address, data, true, (data: Uint8Array | undefined) => {
            return decode(client, data).get();
          });
        },
        set(x: number, call = defaultCall): Promise<void> {
          const data = encode(client).set(x);
          return call<void>(client, address, data, false, (data: Uint8Array | undefined) => {
            return decode(client, data).set();
          });
        },
      } as const,
    } as const);
  export const encode = (client: Provider) => {
    const codec = client.contractCodec(abi);
    return {
      get: () => {
        return codec.encodeFunctionData('6D4CE63C');
      },
      set: (x: number) => {
        return codec.encodeFunctionData('E5C19B2D', x);
      },
    };
  };
  export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => {
    const codec = client.contractCodec(abi);
    return {
      get: (): {
        ret: number;
      } => {
        const [ret] = codec.decodeFunctionResult('6D4CE63C', data);
        return { ret: ret };
      },
      set: (): void => {
        return;
      },
    };
  };
}
